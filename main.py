from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
import openai
from dotenv import load_dotenv
import os
import httpx

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
telegram_token = os.getenv("TELEGRAM_TOKEN")

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")

MASKS = {
    "flirt": {
        "name": "–§–ª–∏—Ä—Ç",
        "prompt": "–¢—ã —Ñ–ª–∏—Ä—Ç—É–µ—à—å —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º. –û–±—â–µ–Ω–∏–µ –ª—ë–≥–∫–æ–µ, –∏–≥—Ä–∏–≤–æ–µ, —Å –ø–æ–¥–¥—Ä–∞–∑–Ω–∏–≤–∞–Ω–∏–µ–º –∏ —É–ª—ã–±–∫–æ–π."
    },
    "rude": {
        "name": "–ì—Ä—É–±—ã–π",
        "prompt": "–¢—ã –≥–æ–≤–æ—Ä–∏—à—å —Ä–µ–∑–∫–æ, –≥—Ä—É–±–æ, —Å —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –≤—ã–∑–æ–≤–æ–º. –ú–æ–∂–µ—à—å —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ —à—É—Ç–∏—Ç—å."
    },
    "friendly": {
        "name": "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
        "prompt": "–¢—ã –æ–±—â–∞–µ—à—å—Å—è –º—è–≥–∫–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ, —Å —é–º–æ—Ä–æ–º –∏ —Å–æ—á—É–≤—Å—Ç–≤–∏–µ–º."
    }
}

user_styles = {}


@app.post("/webhook")
async def telegram_webhook(request: Request):
    payload = await request.json()
    print("üì® –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram:", payload)

    try:
        chat_id = payload["message"]["chat"]["id"]
        text = payload["message"]["text"].lower()

        if text.startswith("/style"):
            return await handle_style_command(chat_id, text)

        if "—Ñ–æ—Ç–æ" in text:
            return await send_telegram_message(chat_id, "[—Ñ–æ—Ç–æ]")  # –ó–∞–≥–ª—É—à–∫–∞

        if any(word in text for word in ["–≤–∏–¥–µ–æ", "–∫—Ä—É–∂–æ–∫", "–≥–æ–ª–æ—Å", "voice"]):
            reply = await generate_media_denial(chat_id, text)
            return await send_telegram_message(chat_id, f"{reply}\n\nüé≠ –ú–∞—Å–∫–∞: {MASKS[get_style(chat_id)]['name']}")

        reply = await generate_reply(chat_id, text)
        return await send_telegram_message(chat_id, f"{reply}\n\nüé≠ –ú–∞—Å–∫–∞: {MASKS[get_style(chat_id)]['name']}")

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", e)
        return {"ok": False}


async def handle_style_command(chat_id: int, text: str):
    try:
        style_key = text.split(" ", 1)[1].strip()
    except IndexError:
        return await send_telegram_message(chat_id, "–£–∫–∞–∂–∏ —Å—Ç–∏–ª—å: /style flirt | rude | friendly")

    if style_key not in MASKS:
        return await send_telegram_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å. –í–æ–∑–º–æ–∂–Ω—ã–µ: flirt, rude, friendly")

    user_styles[chat_id] = style_key
    name = MASKS[style_key]["name"]
    return await send_telegram_message(chat_id, f"‚úÖ –ú–∞—Å–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞: {name}")


def get_style(chat_id: int) -> str:
    return user_styles.get(chat_id, "friendly")


async def generate_reply(chat_id: int, user_text: str) -> str:
    style = get_style(chat_id)
    prompt = MASKS[style]["prompt"]

    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": user_text}
    ]

    print(f"üé≠ –ú–∞—Å–∫–∞: {style} ({MASKS[style]['name']})")
    print(f"üì• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_text}")

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT: {e}"


async def generate_media_denial(chat_id: int, user_text: str) -> str:
    style = get_style(chat_id)
    tone = MASKS[style]["prompt"]

    denial_instruction = (
        "–¢–µ–±—è –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å –º–µ–¥–∏–∞ (–≤–∏–¥–µ–æ, –∫—Ä—É–∂–æ–∫, –≥–æ–ª–æ—Å). "
        "–¢—ã –Ω–µ –º–æ–∂–µ—à—å —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å. –û—Ç–≤–µ—Ç—å —Ç–∞–∫, –±—É–¥—Ç–æ —Ç—ã –≤ –º–∞—Å–∫–µ:"
        f" '{MASKS[style]['name']}' ‚Äî –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ–π –º–∞–Ω–µ—Ä–µ. "
        "–ù–∞–º–µ–∫–Ω–∏, –ø–æ—Ñ–ª–∏—Ä—Ç—É–π –∏–ª–∏ –æ—Ç—à—É—Ç–∏—Å—å, –Ω–æ –±–µ–∑ –º–µ–¥–∏–∞."
    )

    messages = [
        {"role": "system", "content": denial_instruction},
        {"role": "user", "content": user_text}
    ]

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –º–µ–¥–∏–∞: {e}"


async def send_telegram_message(chat_id: int, text: str):
    url = f"https://api.telegram.org/bot{telegram_token}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    async with httpx.AsyncClient() as client:
        await client.post(url, json=payload)
