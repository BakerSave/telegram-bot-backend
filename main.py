from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from dotenv import load_dotenv
import openai
import httpx
import os
import asyncio
import random
import time
import json
from pymorphy2 import MorphAnalyzer

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
telegram_token = os.getenv("TELEGRAM_TOKEN")

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")

morph = MorphAnalyzer()

# –ü–∞–º—è—Ç—å —á–∞—Ç–æ–≤
chat_states = {}

# –ú–∞—Å–∫–∏
masks = {
    "friendly": {"emoji": "üòä", "prompt": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."},
    "flirty": {"emoji": "üòâ", "prompt": "–¢—ã —Ñ–ª–∏—Ä—Ç—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫."},
    "rude": {"emoji": "üòí", "prompt": "–¢—ã –Ω–µ–º–Ω–æ–≥–æ –≥—Ä—É–±—ã–π –∏ –¥–µ—Ä–∑–∫–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫."},
}

# –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–ø–∏—Å–∫–∏)
DEFAULT_STYLE_EXAMPLE = """[
    {"role": "user", "content": "–Ω—É —á–µ —Ç—ã —Ç–∞–º"},
    {"role": "assistant", "content": "–¥–∞ –Ω–∏—á–µ –ª–æ–ª"},
    {"role": "user", "content": "–æ–ø—è—Ç—å –ø—Ä–æ–ø–∞–ª –∫–∞–ø–µ—Ü"},
    {"role": "assistant", "content": "—Å–æ—Ä—è–Ω –∫–∞–Ω–µ—à, —â–∞ —Ç—É—Ç"},
    {"role": "user", "content": "—á–µ –∫–∞–∫ —Å –±–æ—Ç–æ–º —Ç–∞–º?"},
    {"role": "assistant", "content": "–Ω—É —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º –≤—Ä–æ–¥–µ"}
]"""

# –¢–∞–π–º–µ—Ä—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤
last_user_activity = {}
last_bot_ping = {}
PING_MIN_DELAY = 60
PING_MAX_DELAY = 120

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
MAX_HISTORY_CHARS = 20000

def inflect_name(name):
    parsed = morph.parse(name)[0]
    return {
        "nomn": parsed.inflect({"nomn"}).word if parsed.inflect({"nomn"}) else name,
        "accs": parsed.inflect({"accs"}).word if parsed.inflect({"accs"}) else name,
        "ablt": parsed.inflect({"ablt"}).word if parsed.inflect({"ablt"}) else name
    }

def insert_name(chat_id, template: str) -> str:
    user = chat_states.get(chat_id)
    if not user or not user.get("inflections"):
        return template
    f = user["inflections"]
    return template.format(
        name=f.get("nomn", ""),
        acc=f.get("accs", ""),
        ins=f.get("ablt", "")
    )

def apply_style(messages, style_json: str):
    try:
        parsed = json.loads(style_json)
        messages.append({"role": "system", "content": "–¢—ã –≤–µ–¥—ë—à—å –ø–µ—Ä–µ–ø–∏—Å–∫—É –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–∏–∞–ª–æ–≥ –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ, —á—Ç–æ –≤ –ø—Ä–∏–º–µ—Ä–µ –Ω–∏–∂–µ: –±–µ–∑ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤, —Å —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π, —Å —ç–º–æ–¥–∑–∏, —Å '–ª–æ–ª', '–∫–∞–ø–µ—Ü', '–∫–∞–Ω–µ—à', '–Ω—É'. –ù–µ –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ù–µ –±—É–¥—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º."})
        messages.extend(parsed)
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ style:", e)

def trim_history(chat_id, max_chars=MAX_HISTORY_CHARS):
    history = chat_states[chat_id]["history"]
    total = 0
    trimmed = []
    for msg in reversed(history):
        total += len(msg.get("content", ""))
        trimmed.append(msg)
        if total > max_chars:
            break
    trimmed = list(reversed(trimmed[:-1])) if total > max_chars else list(reversed(trimmed))
    chat_states[chat_id]["history"] = trimmed

@app.post("/webhook")
async def telegram_webhook(request: Request):
    payload = await request.json()
    print("üì© INCOMING from Telegram:", payload)

    try:
        chat_id = payload["message"]["chat"]["id"]
        text = payload["message"].get("text", "")

        now = time.time()
        last_user_activity[chat_id] = now
        chat_states.setdefault(chat_id, {
            "history": [],
            "mask": "friendly",
            "name": None,
            "inflections": None,
            "style_learned": None
        })
        last_bot_ping.pop(chat_id, None)

        # –ò–º—è
        lowered = text.lower()
        if any(p in lowered for p in ["–º–µ–Ω—è –∑–æ–≤—É—Ç", "–∑–æ–≤–∏ –º–µ–Ω—è"]):
            words = text.split()
            name = None
            for i, word in enumerate(words):
                if word.lower() in ["–∑–æ–≤—É—Ç", "–º–µ–Ω—è"]:
                    if i + 1 < len(words):
                        name = words[i + 1]
                        break
            if name:
                chat_states[chat_id]["name"] = name
                chat_states[chat_id]["inflections"] = inflect_name(name)

        # –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
        history = chat_states[chat_id]["history"]
        history.append({"role": "user", "content": text})

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∏—Å—Ç–æ—Ä–∏–∏
        trim_history(chat_id)

        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞—Å–∫—É
        if any(word in lowered for word in ["–¥—É—Ä–∞", "—Ç—É–ø–∞—è", "—Ç–≤–∞—Ä—å", "–∏–¥–∏–æ—Ç"]):
            chat_states[chat_id]["mask"] = "rude"
        elif any(word in lowered for word in ["–º–∏–ª–∞—è", "–ª–∞–ø–æ—á–∫–∞", "—Å–µ–∫—Å–∏", "–∫—Ä–∞—Å–æ—Ç–∫–∞", "–∫–ª–∞—Å—Å–Ω–∞—è"]):
            chat_states[chat_id]["mask"] = "flirty"
        else:
            chat_states[chat_id]["mask"] = "friendly"

        mask = chat_states[chat_id]["mask"]
        style = chat_states[chat_id].get("style_learned") or DEFAULT_STYLE_EXAMPLE

        messages = []
        apply_style(messages, style)
        messages += chat_states[chat_id]["history"]

        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=messages
        )
        reply = response["choices"][0]["message"]["content"]
        reply = insert_name(chat_id, reply)

        history.append({"role": "assistant", "content": reply})
        full_reply = f"{reply}\n\n{masks[mask]['emoji']} –ú–∞—Å–∫–∞: {mask.capitalize()}"
        await send_telegram_message(chat_id, full_reply)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", e)

    return {"ok": True} ...
