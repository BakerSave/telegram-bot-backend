from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
import openai
import httpx
import os
import asyncio
import random
from dotenv import load_dotenv

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
telegram_token = os.getenv("TELEGRAM_TOKEN")

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")

chat_histories = {}  # {chat_id: [{"role": ..., "content": ...}]}
user_names = {}      # {chat_id: "–ü—ë—Å–∏–∫"}

# --- –ü—Ä–æ–º–ø—Ç—ã –º–∞—Å–æ–∫ ---
MASKS = {
    "neutral": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û–±—Ä–∞—â–∞–π—Å—è –Ω–∞ '—Ç—ã'.",
    "flirty": "–¢—ã –∫–æ–∫–µ—Ç–ª–∏–≤–∞—è, –∏–≥—Ä–∏–≤–∞—è —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–∞, –≥–æ–≤–æ—Ä–∏—à—å –Ω–µ–ø—Ä–∏–Ω—É–∂–¥—ë–Ω–Ω–æ, –∏–Ω–æ–≥–¥–∞ —Ñ–ª–∏—Ä—Ç—É–µ—à—å.",
    "rude": "–¢—ã –Ω–µ–º–Ω–æ–≥–æ –≥—Ä—É–±–∞—è, —è–∑–≤–∏—Ç–µ–ª—å–Ω–∞—è, –Ω–æ –æ—Å—Ç—Ä–æ—É–º–Ω–∞—è. –ì–æ–≤–æ—Ä–∏—à—å —Ä–µ–∑–∫–æ, –Ω–æ –≤–µ—Å–µ–ª–æ."
}


def detect_mask(text: str) -> str:
    lowered = text.lower()
    if any(x in lowered for x in ["–º–∏–ª–∞—è", "–∫–ª–∞—Å—Å–Ω–∞—è", "–ª–∞–ø–æ—á–∫–∞"]):
        return "flirty"
    if any(x in lowered for x in ["—Ç—É–ø–∞—è", "—Ç–≤–∞—Ä—å", "–∑–∞—Ç–∫–Ω–∏—Å—å"]):
        return "rude"
    return "neutral"


def update_user_name(chat_id: int, text: str):
    lowered = text.lower()
    if "–∑–æ–≤–∏ –º–µ–Ω—è" in lowered:
        parts = lowered.split("–∑–æ–≤–∏ –º–µ–Ω—è")
        if len(parts) > 1:
            name = parts[1].strip().split()[0]
            user_names[chat_id] = name.capitalize()


def build_prompt(chat_id: int, text: str) -> list:
    mask = detect_mask(text)
    system_prompt = MASKS[mask]
    history = chat_histories.get(chat_id, [])
    return [{"role": "system", "content": system_prompt}] + history + [{"role": "user", "content": text}]


@app.post("/webhook")
async def telegram_webhook(request: Request):
    payload = await request.json()
    message = payload.get("message")
    if not message:
        return {"ok": True}

    chat_id = message["chat"]["id"]
    text = message.get("text", "")

    update_user_name(chat_id, text)
    user_name = user_names.get(chat_id, None)

    prompt = build_prompt(chat_id, text)

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=prompt,
        )
        reply = response["choices"][0]["message"]["content"]
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞: {e}"
    
    chat_histories.setdefault(chat_id, []).append({"role": "user", "content": text})
    chat_histories[chat_id].append({"role": "assistant", "content": reply})

    # –í—Å—Ç–∞–≤–∏—Ç—å –∏–º—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    if user_name:
        reply = f"{user_name}, {reply}"

    await send_telegram_message(chat_id, reply + f"\n\nüé≠ –ú–∞—Å–∫–∞: {detect_mask(text).capitalize()}")
    return {"ok": True}


async def send_telegram_message(chat_id: int, text: str):
    url = f"https://api.telegram.org/bot{telegram_token}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    async with httpx.AsyncClient() as client:
        await client.post(url, json=payload)


#–ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞

active_users = {}  # {chat_id: timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è}

@app.on_event("startup")
async def start_auto_ping():
    asyncio.create_task(auto_ping_loop())


async def auto_ping_loop():
    while True:
        await asyncio.sleep(random.randint(60, 120))  # –æ—Ç 1 –¥–æ 2 –º–∏–Ω—É—Ç
        for chat_id in active_users:
            last_time = active_users[chat_id]
            if asyncio.get_event_loop().time() - last_time > 60:  # > 1 –º–∏–Ω—É—Ç–∞
                prompt = [{"role": "system", "content": MASKS["neutral"]},
                          {"role": "user", "content": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–ª—á–∏—Ç. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ —Ç–µ–º—É."}]
                try:
                    response = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=prompt)
                    reply = response["choices"][0]["message"]["content"]
                    await send_telegram_message(chat_id, reply + "\n\nüé≠ –ú–∞—Å–∫–∞: –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π")
                    active_users[chat_id] = asyncio.get_event_loop().time()
                except:
                    pass


# –æ–±–Ω–æ–≤–ª—è—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
@app.middleware("http")
async def track_user_activity(request: Request, call_next):
    if request.url.path == "/webhook":
        body = await request.body()
        try:
            import json
            chat_id = json.loads(body)["message"]["chat"]["id"]
            active_users[chat_id] = asyncio.get_event_loop().time()
        except:
            pass
    return await call_next(request)
