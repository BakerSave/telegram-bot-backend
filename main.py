from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
from dotenv import load_dotenv
import openai
import httpx
import os
import asyncio
import random
import time

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
telegram_token = os.getenv("TELEGRAM_TOKEN")

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ü–∞–º—è—Ç—å —á–∞—Ç–æ–≤
chat_states = {}

# –ú–∞—Å–∫–∏ (—É–ø—Ä–æ—â–µ–Ω—ã)
masks = {
    "friendly": {"emoji": "üòä", "prompt": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."},
    "flirty": {"emoji": "üòâ", "prompt": "–¢—ã —Ñ–ª–∏—Ä—Ç—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫."},
    "rude": {"emoji": "üòí", "prompt": "–¢—ã –Ω–µ–º–Ω–æ–≥–æ –≥—Ä—É–±—ã–π –∏ –¥–µ—Ä–∑–∫–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫."},
}

# –¢–∞–π–º–µ—Ä—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤
last_user_activity = {}
last_bot_ping = {}

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 1‚Äì2 –º–∏–Ω—É—Ç—ã
PING_MIN_DELAY = 60
PING_MAX_DELAY = 120


@app.post("/webhook")
async def telegram_webhook(request: Request):
    payload = await request.json()
    print("üì© INCOMING from Telegram:", payload)

    try:
        chat_id = payload["message"]["chat"]["id"]
        text = payload["message"]["text"]

        now = time.time()
        last_user_activity[chat_id] = now
        chat_states.setdefault(chat_id, {"history": [], "mask": "friendly", "name": None})
        last_bot_ping.pop(chat_id, None)  # —Å–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä –ø–∏–Ω–≥–∞

        # –ò–º—è
        if not chat_states[chat_id]["name"]:
            if any(word.lower().startswith("–º–µ–Ω—è –∑–æ–≤—É—Ç") for word in text.lower().split()):
                name = text.split("–∑–æ–≤—É—Ç")[-1].strip().split()[0]
                chat_states[chat_id]["name"] = name

        # –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
        history = chat_states[chat_id]["history"]
        history.append({"role": "user", "content": text})

        # –ú–∞—Å–∫—É –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        lowered = text.lower()
        if any(word in lowered for word in ["–¥—É—Ä–∞", "—Ç—É–ø–∞—è", "—Ç–≤–∞—Ä—å", "–∏–¥–∏–æ—Ç"]):
            chat_states[chat_id]["mask"] = "rude"
        elif any(word in lowered for word in ["–º–∏–ª–∞—è", "–ª–∞–ø–æ—á–∫–∞", "—Å–µ–∫—Å–∏", "–∫—Ä–∞—Å–æ—Ç–∫–∞", "–∫–ª–∞—Å—Å–Ω–∞—è"]):
            chat_states[chat_id]["mask"] = "flirty"
        else:
            chat_states[chat_id]["mask"] = "friendly"

        mask = chat_states[chat_id]["mask"]
        system_prompt = masks[mask]["prompt"]

        # –ó–∞–ø—Ä–æ—Å –≤ GPT
        messages = [{"role": "system", "content": system_prompt}] + history
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages
        )
        reply = response["choices"][0]["message"]["content"]
        history.append({"role": "assistant", "content": reply})

        mask_emoji = masks[mask]["emoji"]
        full_reply = f"{reply}\n\n{mask_emoji} –ú–∞—Å–∫–∞: {mask.capitalize()}"
        await send_telegram_message(chat_id, full_reply)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", e)

    return {"ok": True}


async def send_telegram_message(chat_id: int, text: str):
    url = f"https://api.telegram.org/bot{telegram_token}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    async with httpx.AsyncClient() as client:
        await client.post(url, json=payload)


# –ê–≤—Ç–æ–ø–∏–Ω–≥
async def ping_loop():
    while True:
        await asyncio.sleep(random.randint(5, 10))  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏

        now = time.time()
        for chat_id, last_time in last_user_activity.items():
            if chat_id in last_bot_ping:
                continue  # —É–∂–µ –ø–∏–Ω–≥–æ–≤–∞–ª–∏, –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞

            since_last_msg = now - last_time
            random_delay = random.randint(PING_MIN_DELAY, PING_MAX_DELAY)

            if since_last_msg > random_delay:
                history = chat_states[chat_id]["history"]
                mask = chat_states[chat_id]["mask"]
                system_prompt = masks[mask]["prompt"]
                name = chat_states[chat_id]["name"] or "–¥—Ä—É–≥"

                messages = [{"role": "system", "content": system_prompt}] + history
                messages.append({"role": "user", "content": f"–¢—ã –¥–∞–≤–Ω–æ –º–æ–ª—á–∏—à—å —Å {name}. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!"})

                try:
                    response = openai.ChatCompletion.create(
                        model="gpt-3.5-turbo",
                        messages=messages
                    )
                    reply = response["choices"][0]["message"]["content"]
                    full_reply = f"{reply}\n\n{masks[mask]['emoji']} –ú–∞—Å–∫–∞: {mask.capitalize()}"
                    await send_telegram_message(chat_id, full_reply)
                    last_bot_ping[chat_id] = now
                    chat_states[chat_id]["history"].append({"role": "assistant", "content": reply})
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∏–Ω–≥–µ {chat_id}: {e}")


@app.on_event("startup")
async def startup_event():
    asyncio.create_task(ping_loop())
