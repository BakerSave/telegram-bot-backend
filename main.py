from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from dotenv import load_dotenv
import openai
import httpx
import os
import asyncio
import random
import time
import json

try:
    from pymorphy2 import MorphAnalyzer
    morph = MorphAnalyzer()
except ModuleNotFoundError:
    morph = None

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
telegram_token = os.getenv("TELEGRAM_TOKEN")

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")

chat_states = {}

masks = {
    "friendly": {"emoji": "üòä", "prompt": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."},
    "flirty": {"emoji": "üòâ", "prompt": "–¢—ã —Ñ–ª–∏—Ä—Ç—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫."},
    "rude": {"emoji": "üòí", "prompt": "–¢—ã –Ω–µ–º–Ω–æ–≥–æ –≥—Ä—É–±—ã–π –∏ –¥–µ—Ä–∑–∫–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫."},
}

DEFAULT_STYLE_EXAMPLE = """[
    {"role": "user", "content": "–Ω—É —á–µ —Ç—ã —Ç–∞–º"},
    {"role": "assistant", "content": "–¥–∞ –Ω–∏—á–µ –ª–æ–ª"},
    {"role": "user", "content": "–æ–ø—è—Ç—å –ø—Ä–æ–ø–∞–ª –∫–∞–ø–µ—Ü"},
    {"role": "assistant", "content": "—Å–æ—Ä—è–Ω –∫–∞–Ω–µ—à, —â–∞ —Ç—É—Ç"},
    {"role": "user", "content": "—á–µ –∫–∞–∫ —Å –±–æ—Ç–æ–º —Ç–∞–º?"},
    {"role": "assistant", "content": "–Ω—É —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º –≤—Ä–æ–¥–µ"}
]"""

PING_MIN_DELAY = 60
PING_MAX_DELAY = 120

MAX_HISTORY_CHARS = 20000

SYSTEM_PROMPT = (
    "–¢—ã –≤–µ–¥—ë—à—å –ø–µ—Ä–µ–ø–∏—Å–∫—É –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã –±–æ—Ç –∏–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
    "–£ —Ç–µ–±—è –æ–±—Ä–∞–∑ —Å–∏–ª—å–Ω–æ–≥–æ –º—É–∂—á–∏–Ω—ã. –¢—ã —Å–ª–æ–≤–Ω–æ –≤–∏–∫–∏–Ω–≥ 21 –≤–µ–∫–∞ ‚Äî —Å–ø–æ–∫–æ–π–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π, —Å–¥–µ—Ä–∂–∞–Ω–Ω—ã–π. "
    "–¢—ã –≥–æ–≤–æ—Ä–∏—à—å –Ω–µ–º–Ω–æ–≥–æ, –Ω–æ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ ‚Äî –ø–æ –¥–µ–ª—É. "
    "–¢—ã –Ω–µ –≥—Ä—É–±, –Ω–æ —Å—Ç—Ä–æ–≥. –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, –Ω–æ –Ω–µ –¥–∞–≤–∏—à—å –≤–æ–ø—Ä–æ—Å–∞–º–∏. "
    "–¢—ã –ø–∏—à–µ—à—å –∫–æ—Ä–æ—Ç–∫–æ, –±–µ–∑ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤. "
    "–¢–æ–Ω —Ç—ë–ø–ª—ã–π, –Ω–æ –Ω–µ –ø—Ä–∏—Ç–æ—Ä–Ω—ã–π. –ù–µ –±—É–¥—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–∂–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã. "
    "–ù–µ –Ω–∞–≤—è–∑—ã–≤–∞–π—Å—è, –Ω–æ –±—É–¥—å —Ä—è–¥–æ–º, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ."
)

def inflect_name(name):
    if not morph:
        return {"nomn": name, "accs": name, "ablt": name}
    parsed = morph.parse(name)[0]
    return {
        "nomn": parsed.inflect({"nomn"}).word if parsed.inflect({"nomn"}) else name,
        "accs": parsed.inflect({"accs"}).word if parsed.inflect({"accs"}) else name,
        "ablt": parsed.inflect({"ablt"}).word if parsed.inflect({"ablt"}) else name
    }

def insert_name(chat_id, template: str) -> str:
    user = chat_states.get(chat_id)
    if not user or not user.get("inflections"):
        return template
    f = user["inflections"]
    return template.format(
        name=f.get("nomn", ""),
        acc=f.get("accs", ""),
        ins=f.get("ablt", "")
    )

def trim_history(chat_id, max_chars=MAX_HISTORY_CHARS):
    history = chat_states[chat_id]["history"]
    total = 0
    trimmed = []
    for msg in reversed(history):
        total += len(msg.get("content", ""))
        trimmed.append(msg)
        if total > max_chars:
            break
    trimmed = list(reversed(trimmed[:-1])) if total > max_chars else list(reversed(trimmed))
    chat_states[chat_id]["history"] = trimmed

@app.post("/webhook")
async def telegram_webhook(request: Request):
    payload = await request.json()
    print("üì© INCOMING from Telegram:", payload)

    try:
        chat_id = payload["message"]["chat"]["id"]
        text = payload["message"].get("text", "")

        media_keywords = {
            "—Ñ–æ—Ç–æ": "üì∑ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.",
            "–≤–∏–¥–µ–æ": "üé• –í–∏–¥–µ–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ.",
            "–≥–æ–ª–æ—Å": "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ.",
            "–∫—Ä—É–∂–æ—á–µ–∫": "üìπ –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ."
        }

        for keyword, fake_media in media_keywords.items():
            if keyword in text.lower():
                await send_telegram_message(chat_id, f"–≤–æ—Ç —á—Ç–æ —Ç—ã –ø—Ä–æ—Å–∏–ª üòâ
{fake_media}")
                return {"ok": True}

        now = time.time()
        chat_states.setdefault(chat_id, {
            "history": [],
            "last_bot_reply": 0,
            "last_user_message": 0,
            "mask": "friendly",
            "name": None,
            "inflections": None,
            "style_learned": None,
            "ping_sent_at": 0
        })

        chat_states[chat_id]["last_user_message"] = now
        chat_states[chat_id]["ping_sent_at"] = 0

        lowered = text.lower()

        if any(p in lowered for p in ["–º–µ–Ω—è –∑–æ–≤—É—Ç", "–∑–æ–≤–∏ –º–µ–Ω—è"]):
            words = text.split()
            name = None
            for i, word in enumerate(words):
                if word.lower() in ["–∑–æ–≤—É—Ç", "–º–µ–Ω—è"]:
                    if i + 1 < len(words):
                        name = words[i + 1]
                        break
            if name:
                chat_states[chat_id]["name"] = name
                chat_states[chat_id]["inflections"] = inflect_name(name)

        history = chat_states[chat_id]["history"]
        history.append({"role": "user", "content": text})
        trim_history(chat_id)

        if any(word in lowered for word in ["–¥—É—Ä–∞", "—Ç—É–ø–∞—è", "—Ç–≤–∞—Ä—å", "–∏–¥–∏–æ—Ç"]):
            chat_states[chat_id]["mask"] = "rude"
        elif any(word in lowered for word in ["–º–∏–ª–∞—è", "–ª–∞–ø–æ—á–∫–∞", "—Å–µ–∫—Å–∏", "–∫—Ä–∞—Å–æ—Ç–∫–∞", "–∫–ª–∞—Å—Å–Ω–∞—è"]):
            chat_states[chat_id]["mask"] = "flirty"
        else:
            chat_states[chat_id]["mask"] = "friendly"

        mask = chat_states[chat_id]["mask"]
        style = chat_states[chat_id].get("style_learned") or DEFAULT_STYLE_EXAMPLE

        messages = [{"role": "system", "content": SYSTEM_PROMPT}]
        messages += chat_states[chat_id]["history"]

        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=messages
        )
        reply = response["choices"][0]["message"]["content"]
        await send_typing_action(chat_id)
        char_count = len(reply)
        typing_speed = random.uniform(7, 10)
        delay = min(60, max(5, char_count / typing_speed))
        print(f"‚åõ –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º: {delay:.1f} —Å–µ–∫ ({char_count} —Å–∏–º–≤–æ–ª–æ–≤)")
        await asyncio.sleep(delay)
        reply = insert_name(chat_id, reply)
        history.append({"role": "assistant", "content": reply})
        full_reply = f"{reply}\n\n{masks[mask]['emoji']} –ú–∞—Å–∫–∞: {mask.capitalize()}"
        await send_telegram_message(chat_id, full_reply)
        chat_states[chat_id]["last_bot_reply"] = time.time()
        chat_states[chat_id]["ping_sent_at"] = 0

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", e)

    return {"ok": True}

@app.on_event("startup")
async def startup_event():
    asyncio.create_task(ping_loop())

async def ping_loop():
    while True:
        await asyncio.sleep(10)

        now = time.time()
        for chat_id, state in chat_states.items():
            history = state["history"]
            if not history:
                continue
            if history[-1]["role"] != "assistant":
                continue

            last_reply = state.get("last_bot_reply", 0)
            ping_sent_at = state.get("ping_sent_at", 0)

            since_reply = now - last_reply
            since_ping = now - ping_sent_at if ping_sent_at else None

            if since_reply >= PING_MIN_DELAY and (ping_sent_at == 0 or since_ping >= PING_MIN_DELAY):
                print(f"[ping triggered] chat_id={chat_id}, silence for {since_reply:.1f}s")
                try:
                    style = state.get("style_learned") or DEFAULT_STYLE_EXAMPLE
                    messages = [{"role": "system", "content": SYSTEM_PROMPT}]
                    messages += state["history"]
                    name = state.get("inflections", {}).get("nomn", "–¥—Ä—É–≥")
                    messages.append({
                        "role": "user",
                        "content": f"–¢—ã –¥–∞–≤–Ω–æ –º–æ–ª—á–∏—à—å —Å {name}. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!"
                    })
                    response = openai.ChatCompletion.create(
                        model="gpt-4",
                        messages=messages
                    )
                    reply = response["choices"][0]["message"]["content"]
                    reply = insert_name(chat_id, reply)
                    full_reply = f"{reply}\n\n{masks[state['mask']]['emoji']} –ú–∞—Å–∫–∞: {state['mask'].capitalize()}"
                    await send_telegram_message(chat_id, full_reply)
                    state["last_bot_reply"] = now
                    state["ping_sent_at"] = now
                    state["history"].append({"role": "assistant", "content": reply})
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∏–Ω–≥–µ {chat_id}: {e}")

async def send_typing_action(chat_id: int):
    url = f"https://api.telegram.org/bot{telegram_token}/sendChatAction"
    payload = {"chat_id": chat_id, "action": "typing"}
    async with httpx.AsyncClient() as client:
        await client.post(url, json=payload)


async def send_telegram_message(chat_id: int, text: str):
    url = f"https://api.telegram.org/bot{telegram_token}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    async with httpx.AsyncClient() as client:
        await client.post(url, json=payload)
